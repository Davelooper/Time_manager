services:
  elixir:
    build: 
      dockerfile: Dockerfile.dev
      context: ./time_manager
    ports:
      - "4000:4000"
    # supprime le service elixir si tu galères
    depends_on:
      - db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: time_manager_dev
      MIX_ENV: dev
    volumes:
      - './time_manager:/time_manager' # Monter le dossier de travail pour avoir le hot-reloading
      - '/time_manager/deps' # Monter les dépendances pour éviter les conflits avec le conteneur
      - '/time_manager/_build' # Monter le dossier de build pour le caching
    deploy:
      replicas: ${SERVICE_ENV == "DEV" ? 1 : 0}  # Actif uniquement si dev
  time_manager:
    build:
      dockerfile: Dockerfile.prod
      context: ./time_manager
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: db
      POSTGRES_DB: time_manager_prod
      DATABASE_URL: ecto://postgres:postgres@db/time_manager_prod
      MIX_ENV: prod
      PORT: 4000
      SECRET_KEY_BASE: your_secret_key_base
    ports:
      - "4000:4000"
    depends_on:
      - db
    deploy:
      replicas: ${SERVICE_ENV == "PROD" ? 1 : 0}  # Actif uniquement si dev
  db:
    image: 'postgres:11-alpine'
    restart: always
    environment:
      POSTGRES_USER: ${SERVICE_ENV == "DEV" ? POSTGRES_USER_DEV : POSTGRES_USER_PROD}
      POSTGRES_PASSWORD: ${SERVICE_ENV == "DEV" ? POSTGRES_PASSWORD_DEV : POSTGRES_PASSWORD_PROD}
      POSTGRES_DB: ${SERVICE_ENV == "DEV" ? POSTGRES_DB_DEV : POSTGRES_DB_PROD}
    ports:
      - '5432:5432'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
  vuejs:
    build: 
        context: ./front-end
        dockerfile: ${SERVICE_ENV == "DEV" ? 'Dockerfile.dev' : 'Dockerfile.prod'}
    ports:
      - '8000:8000'
      - '8080:5173'
    volumes:
      - './front-end:/front-end'
      - /front-end/node_modules
volumes:
  pgdata:
